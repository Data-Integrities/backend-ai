#!/bin/bash
#
# AI Agent for Unraid
# /etc/rc.d/rc.ai-agent
#
# This script manages the AI Agent service on Unraid
#

AGENT_DIR="/opt/ai-agent/agent"
NODE_BIN="/usr/local/bin/node"
LOGFILE="/opt/ai-agent/logs/backend-ai-agent.log"
AGENT_NAME="AGENT_NAME_PLACEHOLDER"
CONFIG_PATH="/opt/backend-ai-config.json"

# Source Unraid functions if available
[ -f /etc/rc.d/rc.functions ] && . /etc/rc.d/rc.functions

# Ensure log directory exists
mkdir -p "$(dirname "$LOGFILE")"

start() {
    echo "Starting AI Agent..."
    
    # Check if Node.js is available
    if [ ! -x "$NODE_BIN" ]; then
        echo "ERROR: Node.js not found at $NODE_BIN"
        echo "Please ensure Node.js is installed before starting the AI Agent service"
        echo "Run: /boot/config/go to install Node.js"
        return 1
    fi
    
    # Check if agent directory exists
    if [ ! -d "$AGENT_DIR" ]; then
        echo "ERROR: Agent directory not found at $AGENT_DIR"
        echo "Please deploy the AI Agent first"
        return 1
    fi
    
    # Check if already running using process detection
    EXISTING_PIDS=$(ps aux | grep "node.*ai-agent/agent/dist/api/index.js" | grep -v grep | awk '{print $2}')
    if [ -n "$EXISTING_PIDS" ]; then
        echo "AI Agent is already running (PIDs: $EXISTING_PIDS)"
        return 1
    fi
    
    # Get correlationId if provided as second parameter
    CORRELATION_ID="$2"
    
    # Set up environment and start
    cd "$AGENT_DIR"
    export AGENT_NAME="$AGENT_NAME"
    export CONFIG_PATH="$CONFIG_PATH"
    export NODE_ENV="production"
    
    # Start the agent with optional correlationId
    if [ -n "$CORRELATION_ID" ]; then
        echo "Starting with correlationId: $CORRELATION_ID"
        nohup "$NODE_BIN" "$AGENT_DIR/dist/api/index.js" "$CORRELATION_ID" > "$LOGFILE" 2>&1 &
    else
        nohup "$NODE_BIN" "$AGENT_DIR/dist/api/index.js" > "$LOGFILE" 2>&1 &
    fi
    STARTED_PID=$!
    
    # Verify it started
    sleep 2
    if ps -p "$STARTED_PID" > /dev/null 2>&1; then
        echo "AI Agent started successfully (PID: $STARTED_PID)"
        return 0
    else
        echo "AI Agent failed to start"
        tail -20 "$LOGFILE"
        return 1
    fi
}

stop() {
    echo "Stopping AI Agent..."
    
    # Find all agent processes using process detection
    AGENT_PIDS=$(ps aux | grep "node.*ai-agent/agent/dist/api/index.js" | grep -v grep | awk '{print $2}')
    
    if [ -n "$AGENT_PIDS" ]; then
        echo "Found AI Agent processes: $AGENT_PIDS"
        
        # Try graceful shutdown first
        for PID in $AGENT_PIDS; do
            echo "Sending TERM signal to PID $PID"
            kill "$PID" 2>/dev/null || true
        done
        
        # Wait for processes to stop
        echo "Waiting for processes to stop..."
        for i in {1..10}; do
            REMAINING_PIDS=$(ps aux | grep "node.*ai-agent/agent/dist/api/index.js" | grep -v grep | awk '{print $2}')
            if [ -z "$REMAINING_PIDS" ]; then
                echo "All AI Agent processes stopped gracefully"
                return 0
            fi
            sleep 1
        done
        
        # Force kill any remaining processes
        REMAINING_PIDS=$(ps aux | grep "node.*ai-agent/agent/dist/api/index.js" | grep -v grep | awk '{print $2}')
        if [ -n "$REMAINING_PIDS" ]; then
            echo "Force killing remaining processes: $REMAINING_PIDS"
            for PID in $REMAINING_PIDS; do
                kill -9 "$PID" 2>/dev/null || true
            done
            echo "AI Agent processes force stopped"
        fi
    else
        echo "AI Agent is not running"
    fi
}

status() {
    # Find all agent processes using process detection
    AGENT_PIDS=$(ps aux | grep "node.*ai-agent/agent/dist/api/index.js" | grep -v grep | awk '{print $2}')
    
    if [ -n "$AGENT_PIDS" ]; then
        echo "AI Agent is running (PIDs: $AGENT_PIDS)"
        
        # Check if API is responding
        if curl -s http://localhost:3080/api/status > /dev/null 2>&1; then
            echo "Agent API is responding on port 3080"
        else
            echo "Warning: Agent processes are running but API is not responding"
        fi
        return 0
    else
        echo "AI Agent is not running"
        return 1
    fi
}

case "$1" in
    start)
        start "$@"
        ;;
    stop)
        stop
        ;;
    restart)
        stop
        sleep 2
        start "$@"
        ;;
    status)
        status
        ;;
    *)
        echo "Usage: $0 {start|stop|restart|status} [correlationId]"
        exit 1
        ;;
esac

exit $?